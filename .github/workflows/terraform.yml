name: 'Terraform'

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  replace:
    name: 'Replace'
    runs-on: ubuntu-latest

    # https://github.com/actions/checkout/issues/95
    steps:
      - uses: actions/checkout@v2
        with:
          # Private version of https://github.com/actions/hello-world-docker-action
          repository: cloudpilots-dev/tf-action-replace
          ref: refs/tags/v2
          token: ${{ secrets.GIT_TOKEN }} # `GitHub_PAT` is a secret that contains your PAT to clone that private repo
      - name: Run replace action
        uses: ./
        with:
          domain: ${{ secrets.TF_VAR_domain }}
          git_url: '${{ secrets.GIT_CREDENTIALS }}/cloudpilots-dev/${{ secrets.TF_VAR_domain }}-environments.git'
  replace2:
    name: 'Replace 2'
    runs-on: ubuntu-latest

    # https://github.com/actions/checkout/issues/95
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GIT_TOKEN }}
      - name: Install gettext
        run: apt-get -y install gettext-base
      - name: Use envsubst
        run: envsubst < "terraform.tf" > "terraform_test.tf"
      - name: Output
        run: cat terraform_test.tf

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    env:
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: ${{secrets.GIT_CREDENTIALS}}

      # - uses: oleksiyrudenko/gha-git-credentials@v1
      #   with:
      #     token: '${{ secrets.GITHUB_TOKEN }}'

      # - name: Test this
      #   run: |
      #     cat <<EOF > /credentials.sh
      #       #!/bin/bash
      #       echo username=git
      #       echo password=\$GITHUB_TOKEN
      #     EOF
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Activate git creds
      #   run: git config --global credential.helper "/credentials.sh"

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Find and Replace
        uses: cloudpilots-dev/tf-action-replace@v1
        with:
          who-to-greet: 'Louis'

      - name: Find and Replace
        run: git status

      # with:
      # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
